snippet atom "Creates an exportable recoil atom | Expand: <C-l>" b
export const $1State = atom${2:<Type>}({
	key: '$1State',
	default: ${3:null}
});
endsnippet

snippet selector "Creates an exportable recoil selector | Expand: <C-l>" b
export const $1Selector = selector({
  key: '$1Selector',
  get: ({ get }) => {
    const ${2:variable} = get(${3:someState})$4;

    return {
      ${2:variable}
    };
  }
});
endsnippet

snippet slice "Creates RTK slice with typescript | Expand: <C-l>"
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../store';

interface ${1/\w+\s*/\u$0/g}State {
	${2:value: number};
	loading: boolean;
	error: string | undefined;
};

const initialState = {
	${3:value: 0},
	loading: false,
	error: ''
} as ${1/\w+\s*/\u$0/g}State

const ${1:name}Slice = createSlice({
	name: '$1',
	initialState,
	reducers: {
		${4:incrementByAmount(state: ${1/\w+\s*/\u$0/g}State, action: PayloadAction<${5:number}>) {
			state.value =+ action.payload
		},}
	},
	extraReducers: {$6}
})

// Actions
export const {
	${7:incrementByAmount}
} = $1Slice.actions

// Selectors
export const select${1/\w+\s*/\u$0/g}s = (state: RootState) => state.$1;

export default $1Slice.reducer
endsnippet
